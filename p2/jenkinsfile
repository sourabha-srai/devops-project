pipeline {
    agent any

    environment {
        IMAGE_NAME = 'devproject'
		DOCKER_HUB_USER = 'sourabhashettypapt666'
		DOCKER_HUB_PASSWORD = 'shetty@123'
		DOCKER_HUB_REGISTRY = 'devproject'
    }

    stages {
        stage('Pull WAR file from bucket') {
            steps {
                script {
		    sh 'rm -rf /var/lib/jenkins/workspace/p2pipeline/Dockerfile'
                    sh 'rm -rf /var/lib/jenkins/workspace/p2pipeline/webapp.war'
                    sh "gsutil cp -r gs://p2bucket/*.war /var/lib/jenkins/workspace/p2pipeline/"
                }
            }
        }

        stage('Clone GitHub repository') {
            steps {
                script {
                    git branch: 'main', url: 'https://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@github.com/sourabha-srai/devops-project.git'
                }
            }
        }

      stage('Build Docker image') {
    steps {
        script {
            // Make sure Docker is installed on the Jenkins agent
            try {
                // Stop all running containers
                def runningContainers = sh(script: 'docker ps -q', returnStdout: true).trim()
                if (runningContainers) {
                    sh "docker stop ${runningContainers}"
                }

                // Remove all stopped containers
                sh "docker container prune -f"

                // Remove all images
                sh "docker rmi -f \$(docker images -q)"

                // Build the Docker image
                sh "docker build -t ${DOCKER_HUB_USER}/${IMAGE_NAME} ."
            } catch (Exception e) {
                currentBuild.result = 'FAILURE'
                error "Docker image build failed: ${e.message}"
            }
        }
    }
}


        stage('Push Docker image to GCR') {
            steps {
                script {
	               sh "docker login -u ${DOCKER_HUB_USER} -p 'shetty@123' docker.io"
                       sh "docker push ${DOCKER_HUB_USER}/${IMAGE_NAME}"
                       sh "docker run -p 8086:8080 -d ${DOCKER_HUB_USER}/${IMAGE_NAME}"
                    }
                }
            }
        }
    }

